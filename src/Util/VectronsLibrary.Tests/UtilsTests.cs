using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace VectronsLibrary.Tests;

[TestClass]
public class UtilsTests
{
    [DataTestMethod]
    [DataRow(ulong.MinValue, "0,00 B")]
    [DataRow(1ul, "1,00 B")]
    [DataRow(10ul, "10,00 B")]
    [DataRow(100ul, "0,10 kB")]
    [DataRow(1000ul, "0,98 kB")]
    [DataRow(1000_0ul, "9,77 kB")]
    [DataRow(1000_00ul, "97,66 kB")]
    [DataRow(1000_000ul, "0,95 MB")]
    [DataRow(1000_000_0ul, "9,54 MB")]
    [DataRow(1000_000_00ul, "95,37 MB")]
    [DataRow(1000_000_000ul, "0,93 GB")]
    [DataRow(1000_000_000_000ul, "0,91 TB")]
    [DataRow(1000_000_000_000_000ul, "0,89 PB")]
    [DataRow(1000_000_000_000_000_000ul, "0,87 EB")]
    [DataRow(1000_000_000_000_000_000_0ul, "8,67 EB")]
    [DataRow(ulong.MaxValue, "16,00 EB")]
    public void FormatBytesReturnsRightValue(ulong value, string expected)
    {
        var result = Utils.FormatBytes(value);
        Assert.AreEqual(expected, result);
    }

    [DataTestMethod]
    [DataRow(ulong.MinValue, 0, "0,00 B")]
    [DataRow(1ul, 0, "1,00 B")]
    [DataRow(10ul, 0, "10,00 B")]
    [DataRow(100ul, 0, "0,10 kB")]
    [DataRow(1000ul, 0, "0,98 kB")]
    [DataRow(1000_0ul, 0, "9,77 kB")]
    [DataRow(1000_00ul, 0, "97,66 kB")]
    [DataRow(1000_000ul, 0, "0,95 MB")]
    [DataRow(1000_000_0ul, 0, "9,54 MB")]
    [DataRow(1000_000_00ul, 0, "95,37 MB")]
    [DataRow(1000_000_000ul, 0, "0,93 GB")]
    [DataRow(1000_000_000_000ul, 0, "0,91 TB")]
    [DataRow(1000_000_000_000_000ul, 0, "0,89 PB")]
    [DataRow(1000_000_000_000_000_000ul, 0, "0,87 EB")]
    [DataRow(1000_000_000_000_000_000_0ul, 0, "8,67 EB")]
    [DataRow(ulong.MaxValue, 0, "16,00 EB")]
    [DataRow(ulong.MinValue, 1, "0,00 kB")]
    [DataRow(100ul, 1, "0,10 MB")]
    [DataRow(1000ul, 1, "0,98 MB")]
    [DataRow(1000_000ul, 1, "0,95 GB")]
    [DataRow(1000_000_000ul, 1, "0,93 TB")]
    [DataRow(1000_000_000_000ul, 1, "0,91 PB")]
    [DataRow(1000_000_000_000_000ul, 1, "0,89 EB")]
    [DataRow(1000_000_000_000_000_000ul, 1, "0,87 ZB")]
    [DataRow(1000_000_000_000_000_000_0ul, 1, "8,67 ZB")]
    [DataRow(ulong.MaxValue, 1, "16,00 ZB")]
    [DataRow(ulong.MinValue, 2, "0,00 MB")]
    [DataRow(100ul, 2, "0,10 GB")]
    [DataRow(1000ul, 2, "0,98 GB")]
    [DataRow(1000_000ul, 2, "0,95 TB")]
    [DataRow(1000_000_000ul, 2, "0,93 PB")]
    [DataRow(1000_000_000_000ul, 2, "0,91 EB")]
    [DataRow(1000_000_000_000_000ul, 2, "0,89 ZB")]
    [DataRow(1000_000_000_000_000_000ul, 2, "0,87 YB")]
    [DataRow(1000_000_000_000_000_000_0ul, 2, "8,67 YB")]
    [DataRow(ulong.MaxValue, 2, "16,00 YB")]
    [DataRow(ulong.MinValue, 3, "0,00 GB")]
    [DataRow(100ul, 3, "0,10 TB")]
    [DataRow(1000ul, 3, "0,98 TB")]
    [DataRow(1000_000ul, 3, "0,95 PB")]
    [DataRow(1000_000_000ul, 3, "0,93 EB")]
    [DataRow(1000_000_000_000ul, 3, "0,91 ZB")]
    [DataRow(1000_000_000_000_000ul, 3, "0,89 YB")]
    [DataRow(1000_000_000_000_000_000ul, 3, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 3, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 3, "16,00 ?B")]
    [DataRow(ulong.MinValue, 4, "0,00 TB")]
    [DataRow(100ul, 4, "0,10 PB")]
    [DataRow(1000ul, 4, "0,98 PB")]
    [DataRow(1000_000ul, 4, "0,95 EB")]
    [DataRow(1000_000_000ul, 4, "0,93 ZB")]
    [DataRow(1000_000_000_000ul, 4, "0,91 YB")]
    [DataRow(1000_000_000_000_000ul, 4, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 4, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 4, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 4, "16,00 ?B")]
    [DataRow(ulong.MinValue, 5, "0,00 PB")]
    [DataRow(100ul, 5, "0,10 EB")]
    [DataRow(1000ul, 5, "0,98 EB")]
    [DataRow(1000_000ul, 5, "0,95 ZB")]
    [DataRow(1000_000_000ul, 5, "0,93 YB")]
    [DataRow(1000_000_000_000ul, 5, "0,91 ?B")]
    [DataRow(1000_000_000_000_000ul, 5, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 5, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 5, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 5, "16,00 ?B")]
    [DataRow(ulong.MinValue, 6, "0,00 EB")]
    [DataRow(100ul, 6, "0,10 ZB")]
    [DataRow(1000ul, 6, "0,98 ZB")]
    [DataRow(1000_000ul, 6, "0,95 YB")]
    [DataRow(1000_000_000ul, 6, "0,93 ?B")]
    [DataRow(1000_000_000_000ul, 6, "0,91 ?B")]
    [DataRow(1000_000_000_000_000ul, 6, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 6, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 6, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 6, "16,00 ?B")]
    [DataRow(ulong.MinValue, 7, "0,00 ZB")]
    [DataRow(100ul, 7, "0,10 YB")]
    [DataRow(1000ul, 7, "0,98 YB")]
    [DataRow(1000_000ul, 7, "0,95 ?B")]
    [DataRow(1000_000_000ul, 7, "0,93 ?B")]
    [DataRow(1000_000_000_000ul, 7, "0,91 ?B")]
    [DataRow(1000_000_000_000_000ul, 7, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 7, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 7, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 7, "16,00 ?B")]
    [DataRow(ulong.MinValue, 8, "0,00 YB")]
    [DataRow(100ul, 8, "0,10 ?B")]
    [DataRow(1000ul, 8, "0,98 ?B")]
    [DataRow(1000_000ul, 8, "0,95 ?B")]
    [DataRow(1000_000_000ul, 8, "0,93 ?B")]
    [DataRow(1000_000_000_000ul, 8, "0,91 ?B")]
    [DataRow(1000_000_000_000_000ul, 8, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 8, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 8, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 8, "16,00 ?B")]
    [DataRow(ulong.MinValue, 9, "0,00 ?B")]
    [DataRow(100ul, 9, "0,10 ?B")]
    [DataRow(1000ul, 9, "0,98 ?B")]
    [DataRow(1000_000ul, 9, "0,95 ?B")]
    [DataRow(1000_000_000ul, 9, "0,93 ?B")]
    [DataRow(1000_000_000_000ul, 9, "0,91 ?B")]
    [DataRow(1000_000_000_000_000ul, 9, "0,89 ?B")]
    [DataRow(1000_000_000_000_000_000ul, 9, "0,87 ?B")]
    [DataRow(1000_000_000_000_000_000_0ul, 9, "8,67 ?B")]
    [DataRow(ulong.MaxValue, 9, "16,00 ?B")]
    [DataRow(ulong.MaxValue, int.MinValue, "16,00 ?B")]
    [DataRow(ulong.MaxValue, int.MaxValue, "16,00 ?B")]
    public void FormatBytesReturnsRightValueWithStart(ulong value, int start, string expected)
    {
        var result = Utils.FormatBytes(value, start);
        Assert.AreEqual(expected, result);
    }
}